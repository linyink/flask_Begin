from flask import Flask, render_template,flash,request,redirect,url_for
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import StringField,SubmitField
from wtforms.validators import DataRequired # 对数据做判断
"""
为了解决ModuleNotFoundError: No module named 'MySQLdb'问题，要添加如下代码:
"""
import pymysql
pymysql.install_as_MySQLdb()

app = Flask(__name__)
app.secret_key = 'lin123456'
# 配置数据库的链接
app.config['SQLALCHEMY_DATABASE_URI']='mysql://root:123456@127.0.0.1/flask_books'
# 跟踪修改不启用
app.config['SQLALCHEMY_TRACK_MODIFICATIONS']=False
# 创建数据库对象
db = SQLAlchemy(app)
# 创建数据库对象

"""
1.配置数据库
2.添加书和作者模型
3.添加数据
4.使用模型显示数据库查询的数据
5.使用WTF显示表单
6.实现相关的增删逻辑
    a.增加数据
    b.删除书籍-->网页中删除-->点击需要发送书籍的ID给删除书籍的路由-->路由需要接受参数
    c.删除作者，全部删除
"""

# 定义书和作者模型
# 作者模型
class Author(db.Model):
    # 表名
    __tablename__ = 'authors'
    # 字段
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(16),unique=True)
    # 关系引用
    # books是给自己用的, author是给Book模型用的
    books = db.relationship('Book',backref='author')
    # 重写__repr__()方法，打印出name信息
    def __repr__(self):
        return 'Author: %s' %self.name

# 定义书籍模型
class Book(db.Model):
    # 表名
    __tablename__ = 'books'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(16),unique=True)
    author_id = db.Column(db.Integer,db.ForeignKey('authors.id'))
    def __repr__(self):
        return "Book: %s %s" % (self.name,self.author_id)

# 自定义表单类
class AuthorForm(FlaskForm):
    author = StringField('作者',validators=[DataRequired()])  # DataRequired()是一个方法，要加括号才能flash.
    book = StringField('书籍',validators=[DataRequired()])
    submit = SubmitField('添加')

@app.route('/delete_author/<author_id>')  # 相当于动作的执行路由
def delete_author(author_id):
    # 1.查询数据库，是否有该id的作者(先删除书籍，再删除作者)。
    author = Author.query.get(author_id)
    if author:
        try:
            # 在Book中查询是否有author_id,再删除
            Book.query.filter_by(author_id=author.id).delete()
            # 删除作者
            db.session.delete(author)
            db.session.commit()
        except Exception as e:
            print(e)
            flash('删除作者出错')
            db.session.rollback()
    else:
        # 没有找到该作者就报错
        flash('没有找到该作者')
    return redirect(url_for('index'))

@app.route('/delete_book/<book_id>')
def delete_book(book_id):
    #1.查询数据库，是否有该id的书。
    book = Book.query.get(book_id)
    # 2. 如果有就删除
    if book: # 因为是在操作数据库，有可能会出错，所以用try
        try:
            db.session.delete(book)
            db.session.commit()
        except Exception as e:
            print(e)
            flash('删除书籍出错')
            db.session.rollback()
    else:
        # 3.没有找到书籍就提示错误
        flash('没有找到该书籍')
    # 如何返回当前的网址-->重定向
    #return redirect("/") 重定向
    # url_for('index')需要传入视图函数名，返回对应的视图地址
    return redirect(url_for('index'))


@app.route('/', methods=["GET","POST"])
def index():
    # 创建自定义的表单类
    author_form = AuthorForm()
    """
    验证逻辑：
    1.调用WTF的函数实现验证
    2.验证通过获取数据
    3.判断作者是否存在
    4.如果作者存在，判断书籍是否存在，没有重复书籍就添加数据，如果重复就提示错误
    5.如果作者不存在，添加作者和书籍
    6.验证不通过就提示错误
    """
    # 1.调用WTF的函数实现验证
    if author_form.validate_on_submit():
        #2.验证通过获取数据
        author_name = author_form.author.data  # 从文本框获取数据
        book_name = author_form.book.data
        # 3.判断作者是否存在,对作者做查询操作
        author = Author.query.filter_by(name = author_name).first()
        # 4.如果作者存在
        if author:  # 如果为真
            # 判断书籍是否存在
            book = Book.query.filter_by(name=book_name).first()
            # 如果重复就提示错误
            if book:
                flash('已存在同名书名')
            else:
                try:
                    # 没有重复书籍就添加数据
                    new_book = Book(name=book_name,author_id=author.id)
                    db.session.add(new_book)
                    db.session.commit()
                except Exception as e:
                    print(e)
                    flash('添加书籍失败')
                    db.session.rollback()
        else:
            #5.如果作者不存在,添加作者和书籍
            try:
                new_author = Author(name=author_name)
                db.session.add(new_author)
                db.session.commit()

                new_book = Book(name = book_name,author_id = new_author.id)
                db.session.add(new_book)
                db.session.commit()
            except Exception as e:
                print(e)
                flash('添加作者和书籍失败')
                db.session.rollback()

    else:
        #6.验证不通过就提示错误
        if request.method == 'POST':
            flash('参数错误')

    # 查询所有的作者信息，让信息传递给模板
    authors = Author.query.all()  # 查询所有Author类中的数据
    if not all([authors]):
        flash('有空值')

    return render_template("books.html",
                       authors = authors,
                       form = author_form)

if __name__=='__main__':
    # 删除所有表数据
    db.drop_all()
    # 创建表数据
    db.create_all()

    # 生成数据
    au1 = Author(name="老王")
    au2 = Author(name="老刘")
    au3 = Author(name="老林")
    # 把数据提交给用户会话
    db.session.add_all([au1,au2,au3])
    #提交会话
    db.session.commit()

    bk1 =   Book(name='老王回忆录',author_id=au1.id)
    bk2 = Book(name='python爬虫', author_id=au2.id)
    bk3 = Book(name='flask开发', author_id=au3.id)
    db.session.add_all([bk1,bk2,bk3])
    db.session.commit()

    app.run(debug=True)
